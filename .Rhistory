'))
myData <- simulateData(population.model, model.type="lavaan",sample.nobs=n,return.type="data.frame",standardized=T)
(cov1=cov(myData)) #variances are standardized except for Y, not sure why
(cor1=cor(myData)) #check cor mat
#fit the underlying model on simulated data
(modelSim <-str_glue('
Y ~ bxy*X +bggyd*GG
X ~ bggx*GG
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
TotalEffect:=bxy+ bggx*bggyd
prop:=GenConf/TotalEffect
'))
#fit on simulated data
fit <- lavaan( modelSim, data=myData,estimator="GLS")
(pe=parameterEstimates(fit,standardized=T))
(pe=parameterEstimates(fit,standardized=T))
0.3*0.3
0.529-0.09
0.347-0.308
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
TotalEffect:=bxy+ bggx*bggyd
prop:=GenConf/TotalEffect
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
(peWU=parameterEstimates(fitWU,standardized=T))
#model cor defined earlier
fitcor <- sem(modelcor, data=myData,estimator="GLS")
#model cor defined earlier
modelcor <- 'Y ~ bxy*X'
fitcor <- sem(modelcor, data=myData,estimator="GLS")
(pecor=parameterEstimates(fitcor,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
prop:=GenConf/TotalEffect
TotalEffect:=bxy+ bggx*bggyd + bu*bu1 #total effect different now as include U
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
prop:=GenConf/TotalEffect
TotalEffect:=bxy+ bggx*bggyd + bu*bu1 #total effect different now as include U
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
TotalEffect:=bxy+ bggx*bggyd + bu*bu1 #total effect different now as include U
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
TotalEffect:=bxy+ bggx*bggyd + bu*bu1
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#Model without U
(modelWoU <-str_glue('
Y ~ bxy*X +bggyd*GG
X ~ bggx*GG
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
TotalEffect:=bxy+ bggx*bggyd
prop:=GenConf/TotalEffect
'))
#fit on simulated data
fitWoU <- lavaan( modelWoU, data=myData,estimator="GLS")
(peWoU=parameterEstimates(fitWoU,standardized=T))
#Beta is very inflated compared to actual causal beta, but this is expected as we are not estimating causal beta
#However, genetic confounding is also underestimated, which is because bggyd is lower, likely due to collider biais as in Pak Sham paper
#The bias is much less however
peWoU[pe$label=="GenConf","est"]-peWU[pe$label=="GenConf","est"]
peWoU[pe$label=="GenConf","est"]
peWU[pe$label=="GenConf","est"]
#########ADD U to standardized solution to check for collider bias###
########################################################################
(population.model <-
str_glue('
#paths and loading
Y ~ {pxy}*X +{pggyd}*GG +0.30*U
X ~ {pggx}*GG +0.3*U
GG =~sqrt(1-{pme})*G
'))
myData <- simulateData(population.model, model.type="lavaan",sample.nobs=n,return.type="data.frame",standardized=T)
(cov1=cov(myData)) #variances are standardized except for Y, not sure why
(cor1=cor(myData)) #check cor mat
#model cor defined earlier
modelcor <- 'Y ~ bxy*X'
fitcor <- sem(modelcor, data=myData,estimator="GLS")
(pecor=parameterEstimates(fitcor,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
TotalEffect:=bxy+ bggx*bggyd + bu*bu1
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#Model without U
(modelWoU <-str_glue('
Y ~ bxy*X +bggyd*GG
X ~ bggx*GG
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
TotalEffect:=bxy+ bggx*bggyd
'))
#fit on simulated data
fitWoU <- lavaan( modelWoU, data=myData,estimator="GLS")
(peWoU=parameterEstimates(fitWoU,standardized=T))
#Beta is very inflated compared to actual causal beta, but this is expected as we are not estimating causal beta
#However, genetic confounding is also underestimated, which is because bggyd is lower, likely due to collider biais as in Pak Sham paper
#The bias is much less however
peWoU[pe$label=="GenConf","est"]-peWU[pe$label=="GenConf","est"]
peWU[pe$label=="GenConf","est"]
#Beta is very inflated compared to actual causal beta, but this is expected as we are not estimating causal beta
#However, genetic confounding is also underestimated, which is because bggyd is lower, likely due to collider biais as in Pak Sham paper
#The bias is much less however
peWoU[peWoU$label=="GenConf","est"]-peWU[peWU$label=="GenConf","est"]
peWoU[peWoU$label=="bxy","est"]
#Which is the same as
peWoU[peWoU$label=="bxy","est"]-peWU[peWU$label=="bxy","est"]-peWU[peWU$label=="Uconf","est"]
#########ADD U to standardized solution to check for collider bias###
########################################################################
(population.model <-
str_glue('
#paths and loading
Y ~ {pxy}*X +{pggyd}*GG -0.30*U
X ~ {pggx}*GG -0.3*U
GG =~sqrt(1-{pme})*G
'))
myData <- simulateData(population.model, model.type="lavaan",sample.nobs=n,return.type="data.frame",standardized=T)
(cov1=cov(myData)) #variances are standardized except for Y, not sure why
(cor1=cor(myData)) #check cor mat
#model cor defined earlier
modelcor <- 'Y ~ bxy*X'
fitcor <- sem(modelcor, data=myData,estimator="GLS")
(pecor=parameterEstimates(fitcor,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
TotalEffect:=bxy+ bggx*bggyd + bu*bu1
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#Model without U
(modelWoU <-str_glue('
Y ~ bxy*X +bggyd*GG
X ~ bggx*GG
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
TotalEffect:=bxy+ bggx*bggyd
'))
#fit on simulated data
fitWoU <- lavaan( modelWoU, data=myData,estimator="GLS")
(peWoU=parameterEstimates(fitWoU,standardized=T))
#Beta is very inflated compared to actual causal beta, but this is expected as we are not estimating causal beta
#However, genetic confounding is also underestimated, which is because bggyd is lower, likely due to collider biais as in Pak Sham paper
#The bias is much less however,equal to:
peWoU[peWoU$label=="GenConf","est"]-peWU[peWU$label=="GenConf","est"]
#Which is the same as the residual association minus the true beta, minus the environmnetal confounding
peWoU[peWoU$label=="bxy","est"]-peWU[peWU$label=="bxy","est"]-peWU[peWU$label=="Uconf","est"]
#########ADD U to standardized solution to check for collider bias###
########################################################################
(population.model <-
str_glue('
#paths and loading
Y ~ {pxy}*X +{pggyd}*GG + (-0.30)*U
X ~ {pggx}*GG + (-0.3)*U
GG =~sqrt(1-{pme})*G
'))
myData <- simulateData(population.model, model.type="lavaan",sample.nobs=n,return.type="data.frame",standardized=T)
(cov1=cov(myData)) #variances are standardized except for Y, not sure why
(cor1=cor(myData)) #check cor mat
#model cor defined earlier
modelcor <- 'Y ~ bxy*X'
fitcor <- sem(modelcor, data=myData,estimator="GLS")
(pecor=parameterEstimates(fitcor,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
TotalEffect:=bxy+ bggx*bggyd + bu*bu1
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#Model without U
(modelWoU <-str_glue('
Y ~ bxy*X +bggyd*GG
X ~ bggx*GG
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
TotalEffect:=bxy+ bggx*bggyd
'))
#fit on simulated data
fitWoU <- lavaan( modelWoU, data=myData,estimator="GLS")
(peWoU=parameterEstimates(fitWoU,standardized=T))
#Beta is very inflated compared to actual causal beta, but this is expected as we are not estimating causal beta
#However, genetic confounding is also underestimated, which is because bggyd is lower, likely due to collider biais as in Pak Sham paper
#The bias is much less however,equal to:
peWoU[peWoU$label=="GenConf","est"]-peWU[peWU$label=="GenConf","est"]
#Which is the same as the residual association minus the true beta, minus the environmnetal confounding
peWoU[peWoU$label=="bxy","est"]-peWU[peWU$label=="bxy","est"]-peWU[peWU$label=="Uconf","est"]
#########ADD U to standardized solution to check for collider bias###
########################################################################
(population.model <-
str_glue('
#paths and loading
Y ~ {pxy}*X +{pggyd}*GG + (-0.30)*U
X ~ {pggx}*GG + (-0.3)*U
GG =~sqrt(1-{pme})*G
'))
myData <- simulateData(population.model, model.type="lavaan",sample.nobs=n,return.type="data.frame",standardized=T)
(cov1=cov(myData)) #variances are standardized except for Y, not sure why
(cor1=cor(myData)) #check cor mat
#model cor defined earlier
modelcor <- 'Y ~ bxy*X'
fitcor <- sem(modelcor, data=myData,estimator="GLS")
(pecor=parameterEstimates(fitcor,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
TotalEffect:=bxy+ bggx*bggyd + bu*bu1
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#########ADD U to standardized solution to check for collider bias###
########################################################################
(population.model <-
str_glue('
#paths and loading
Y ~ {pxy}*X +{pggyd}*GG + (0.30)*U
X ~ {pggx}*GG + (-0.3)*U
GG =~sqrt(1-{pme})*G
'))
myData <- simulateData(population.model, model.type="lavaan",sample.nobs=n,return.type="data.frame",standardized=T)
(cov1=cov(myData)) #variances are standardized except for Y, not sure why
(cor1=cor(myData)) #check cor mat
#model cor defined earlier
modelcor <- 'Y ~ bxy*X'
fitcor <- sem(modelcor, data=myData,estimator="GLS")
(pecor=parameterEstimates(fitcor,standardized=T))
#fit the underlying model on simulated data, including U
(modelWU <-str_glue('
Y ~ bxy*X +bggyd*GG +bu*U
X ~ bggx*GG +bu1*U
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
U~~U
U~~G
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
Uconf:=bu*bu1
TotalEffect:=bxy+ bggx*bggyd + bu*bu1
'))
#fit on simulated data
fitWU <- lavaan( modelWU, data=myData,estimator="GLS")
(peWU=parameterEstimates(fitWU,standardized=T))
#Model without U
(modelWoU <-str_glue('
Y ~ bxy*X +bggyd*GG
X ~ bggx*GG
GG =~ l*G
#variances
GG~~1*GG
G~~me*G
X~~X
Y~~Y
bggyd+bggx*bxy == {pggy}
GenConf:=bggx*bggyd
TotalEffect:=bxy+ bggx*bggyd
'))
#fit on simulated data
fitWoU <- lavaan( modelWoU, data=myData,estimator="GLS")
(peWoU=parameterEstimates(fitWoU,standardized=T))
#Beta is very inflated compared to actual causal beta, but this is expected as we are not estimating causal beta
#However, genetic confounding is also underestimated, which is because bggyd is lower, likely due to collider biais as in Pak Sham paper
#The bias is much less however,equal to:
peWoU[peWoU$label=="GenConf","est"]-peWU[peWU$label=="GenConf","est"]
#Which is the same as the residual association minus the true beta, minus the environmnetal confounding
peWoU[peWoU$label=="bxy","est"]-peWU[peWU$label=="bxy","est"]-peWU[peWU$label=="Uconf","est"]
37000+65000
37000+59000
96000*5
96000*4.5
9.45/3.6
100*15/1600
100*15.75/1800
100*16.75/1800
100*16.75/2000
200010/66000
35
35*4
900/12
455/6.5*12
7.5*5
7.5*22
7.5*22*0.4
7.5*22*0.6
68/174
68/170
5e-8
print(5e-8)
HOME=getwd()
setwd(HOME)
source('gsens.source.R')
1971043+ 239923 +600000+100000+100000
15*5
source('gsens.source.R')
setwd("~/AJB/ENCOURS/B_Statistiques/NotesProgrammes/JBPG/Gsens")
source('gsens.source.R')
#Second education, with G1
#has to inverse
gsensX(rxy=-0.0894,rgx=0.2894,rgy=-0.0268,n=3663,h2=0.2894^2)
setwd(HOME)
source('gsens.source.R')
HOME=getwd()
setwd(HOME)
source('gsens.source.R')
#No constraints at all:
gsens2(rxy=-0.0894,rg1x=0.2894,rg2y=0.2522,rg1y=-0.0268,rg2x=-0.0837,rg1g2=-0.1847,n=3785,h2.x=0.25*0.31,h2.y=0.1855,constrain='')
#adds up
gsens2bis(rxy=-0.0894, rg1x=0.2894, rg2y=.2522, rg1y=-0.0268, rg2x=-0.0837, rg1g2=-0.1847, n=3663, h2.x=0.25*.31, h2.y=.1844)
#adds up
gsens2(rxy=-0.0894, rg1x=0.2894, rg2y=.2522, rg1y=-0.0268, rg2x=-0.0837, rg1g2=-0.1847, n=3663, h2.x=0.25*.31, h2.y=.1844)
#No constraints at all:
gsens2(rxy=-0.0894,rg1x=0.2894,rg2y=0.2522,rg1y=-0.0268,rg2x=-0.0837,rg1g2=-0.1847,n=3663,h2.x=0.25*0.31,h2.y=0.1855,constrain='')
gsens2bis(rxy=-0.0894, rg1x=0.2894, rg2y=.2522, rg1y=-0.0268, rg2x=-0.0837, rg1g2=-0.1847, n=3663, h2.x=0.25*.31, h2.y=.1844)
gsens2bis(rxy=-0.0894,rg1x=sqrt(0.25*.31), rg2y=sqrt(0.1855), rg1y=sqrt(0.25*.31)*-0.0268/0.2894, rg2x=sqrt(0.1855)*-0.0837/0.2522,
rg1g2=sqrt(0.25*0.31*0.1855)*-0.1847/.2894/.2522,
n=3663, h2.x=0.25*0.31, h2.y=0.1855, constrain='')
########Frank ratios
gsens2bis(rxy=-0.0894, rg1x=0.2894, rg2y=.2522, rg1y=-0.0268, rg2x=-0.0837, rg1g2=-0.1847, n=3663, h2.x=0.25*.31, h2.y=.1844)
gsens2bis(rxy=-0.0894,rg1x=sqrt(0.25*.31), rg2y=sqrt(0.1855), rg1y=sqrt(0.25*.31)*-0.0268/0.2894, rg2x=sqrt(0.1855)*-0.0837/0.2522,
rg1g2=sqrt(0.25*0.31*0.1855)*-0.1847/.2894/.2522,
n=3663, h2.x=0.25*0.31, h2.y=0.1855, constrain='')
# now with all constraints
gsens2bis(rxy=-0.0894, rg1x=0.2894, rg2y=0.2522, rg1y=-0.0268, rg2x=-0.0837, rg1g2=-0.1847, n=3663, h2.x=0.25*.31, h2.y=.1844, constrain='vg1>0;vg2>0;lg1<1;lg2<1;bg1y<0;bg2x<0')
# now with all constraints
gsens1(rxy=-0.0894,rgy=0.2522,rgx=-0.0837,n=3663,h2=.1844,constrain='')
sqrt(0.25*0.31*0.1855)
sqrt(0.25*0.31)*sqrt(0.1855)
gsens2bis(rxy=-0.0894,rg1x=sqrt(0.25*.31), rg2y=sqrt(0.1855), rg1y=sqrt(0.25*.31)*-0.0268/0.2894, rg2x=sqrt(0.1855)*-0.0837/0.2522,
rg1g2=sqrt(0.25*0.31*0.1855)*-0.1847/.2894/.2522,
n=3663, h2.x=0.25*0.31, h2.y=0.1855, constrain='')
gsens2bis(rxy=-0.0894,rg1x=sqrt(0.25*.31), rg2y=sqrt(0.1855), rg1y=sqrt(0.25*.31)*-0.0268/0.2894, rg2x=sqrt(0.1855)*-0.0837/0.2522,
rg1g2=sqrt(0.25*0.31*0.1855)*-0.1847/(.2894*.2522),
n=3663, h2.x=0.25*0.31, h2.y=0.1855, constrain='')
gsens2bis(rxy=-0.0894,rg1x=sqrt(0.25*.31), rg2y=sqrt(0.1855), rg1y=sqrt(0.25*.31)*-0.0268/0.2894, rg2x=sqrt(0.1855)*-0.0837/0.2522,
rg1g2=0.2,
n=3663, h2.x=0.25*0.31, h2.y=0.1855, constrain='')
gsens2bis(rxy=-0.0894,rg1x=sqrt(0.25*.31), rg2y=sqrt(0.1855), rg1y=sqrt(0.25*.31)*-0.0268/0.2894, rg2x=sqrt(0.1855)*-0.0837/0.2522,
rg1g2=sqrt(0.25*0.31*0.1855)*-0.1847/(.2894*.2522),
n=3663, h2.x=0.25*0.31, h2.y=0.1855, constrain='')
gsens2bis(rxy=-0.0894,rg1x=sqrt(0.25*.31), rg2y=sqrt(0.1855), rg1y=sqrt(0.25*.31)*-0.0268/0.2894, rg2x=sqrt(0.1855)*-0.0837/0.2522,
rg1g2=sqrt(0.25*0.31*0.1855)*-0.1847/.2894/.2522,
n=3663, h2.x=0.25*0.31, h2.y=0.1855, constrain='')
